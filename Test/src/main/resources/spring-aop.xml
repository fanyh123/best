<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
 	xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
       
    <bean id="bankService" class="com.ran.test.aop.advice.service.BankServiceImpl"/>
    <!-- 切面 -->
    <bean id="myAspect" class="com.ran.test.aop.advice.MyAspect"/>
    <!-- aop配置: 
                AOP的基础：横切  反射  动态代理  拦截器;
                                        代理对象的生成：工厂模式 proxyFactory proxyFactoryBean。               
			     
			    aspect 切面,包含pointcut和advice代码。
			    pointcut 横切点,选择了一个或者多个joinpoint的表达式。
			    joinpoint 连接点，程序执行中的某个点，通知介入的地方。
			    advice 通知,定义在连接点,为切面功能增强提供织入接口。
			    
			         五种通知类型：前置通知，正常返回通知、异常返回通知(出现异常才会走)、返回通知，环绕通知(可以决定joinpoint是否继续执行)。
                                       五种通知的执行顺序：前置通知before》》环绕通知around》》正常返回通知after-returning/异常返回通知after-throwing》》返回通知after。
                                       
               AOP的实现方式与公共子模块调用的区别：后者是硬调用，程序中还是有很多重复的调用语句代码；前者是软嵌入，业务逻辑中不再有AOP的调用代码。AOP的逻辑都在配置文件种。 
               
                                     基于AOP的方式做事务拦截，通过AOP定义事务的增强切面。
               AOP配置的方式实现事务管理，使事务处理这一横切面的代码从业务代码中分离。
			    
			   http://www.cnblogs.com/davidwang456/p/4013631.html
			       唯品会网关设计 http://www.cnblogs.com/davidwang456/p/6845178.html
    -->
    <aop:config>
        <aop:aspect ref="myAspect">
            <aop:pointcut expression="execution(* com.ran.test.aop.advice.service.*.*(..))" id="pointcut"/>
            <aop:before method="before" pointcut-ref="pointcut"/>
            <aop:after method="after" pointcut-ref="pointcut"/>
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut"/>
            <aop:around method="around" pointcut-ref="pointcut"/><!-- 配置了环绕通知，可以决定连接点不执行。 -->
        </aop:aspect>
    </aop:config>
    
    <!-- <aop:config>
           <aop:pointcut expression="" id=""/>
           <aop:advisor advice-ref=""/>
         </aop:config>    
         <tx:advice>
           <tx:attributes>
	            <tx:method name=""/>
	            <tx:method name=""/>
	            <tx:method name=""/>
	            <tx:method name=""/> 
           </tx:attributes>
        </tx:advice> -->
        
        
</beans>