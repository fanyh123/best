<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
 	xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"> 
    
    <!-- 在spring容器中加载配置文件,配置文件中的值spring容器中初始化的bean中能取到,跟当前容器中配置的扫描的包和注解有关.
     ignore-unresolvable="false"找不到文件的情况下抛出异常 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="false"/>
    
    <!-- 配置redis cluster，至少3个节点才能启动集群，这里配置6个，3对主从。可以是6个端口，也可以是多个服务器。
                      需要启动6个redis实例,然后创建集群。                
         Jedis        JedisPool  单台
         SharedJedis  SharedJedisPool 分布式redis集群客户端       分片。实现多redis实例协同服务。
         JedisCluster redis官方集群方案，哈希槽散列。整个集群被看做一个整体操作，像操作单实例redis一样操作集群。
         redis Cluster中，每个节点保存数据，每个节点都和其他所有节点相连，每个节点的从节点都可以成为主节点。存数据和取数据的路由算法一直，所以存取会到一个卡槽。
                      只有集群中主节点完整才能访问，任何一个主节点丢失都不能访问。
         
         redis是单线程的设计。
                      事物:multi [QUEUE] exec discard，redis的事物提交，如果有一个失败的不会影响其他的正常提交，这点与数据库事物不一样。
                      加乐观锁：watch。加锁以后要开启事物，这样加锁才会有意义。
                      主从
                      持久化(到磁盘文件)：用于重启后的数据恢复。RDB和AOF，前者为默认
                      集群
          -->
    <bean id="jedisCluster" class=""></bean>
    
    
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClass}" />
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置连接池大小 -->
        <property name="initialSize" value="5" />
        <property name="minIdle" value="5" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="testWhileIdle" value="true" /> 
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 --> 
        <property name="testOnBorrow" value="true" /> 
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
        <property name="poolPreparedStatements" value="true" /> 
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
        <property name="validationQuery" value="select 1 " />
        <!-- 配置数据库连接池的监控 -->
        <property name="filters" value="stat" /> 
        <property name="proxyFilters"> 
          <list> 
            <ref bean="logFilter" /> 
          </list> 
        </property>
    </bean>
    
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
        <property name="statementExecutableSqlLogEnable" value="false" /> 
    </bean>
    
    <!-- 整合MyBatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" ref="classpath:mybatis.xml"/>
        <property name="mapperLocations" ref="classpath:com.ran.test.mapping/*.xml"/>
        <property name="typeAliasesPackage" value="com.ran.test.entity" />
    </bean>
    <!-- 扫描mapper接口文件 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ran.test.dao.mapper"/>
    </bean>
    
    <!-- 配置spring事物管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 基于AOP的方式做事物拦截 -->
    <aop:config></aop:config>
        
</beans>